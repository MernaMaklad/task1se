5 ¦ DistributeD Git
101
If you run that command before committing, you can tell if you’re about to commit whitespace issues that may annoy other developers. Next, try to make each commit a logically separate changeset. If you can, try to make your changes digestible – don’t code for a whole weekend on five different issues and then submit them all as one massive commit on Monday. Even if you don’t commit during the weekend, use the staging area on Monday to split your work into at least one commit per issue, with a useful message per commit. If some of the changes modify the same file, try to use git  add --patch to partially stage files. The project snapshot at the tip of the branch is identical whether you do one commit or five, as long as all the changes are added at some point, so try to make things easier on your fellow developers when they have to review your changes. This approach also makes it easier to pull out or revert one of the changesets if you need to later. The last thing to keep in mind is the commit message. Getting in the habit of creating quality commit messages makes using and collaborating with Git a lot easier. As a general rule, your messages should start with a single line that’s no more than about 50 characters and that describes the changeset concisely, followed by a blank line, followed by a more detailed explanation. The Git project requires that the more detailed explanation include your motivation for the change and contrast its implementation with previous behavior—this is a good guideline to follow. It’s also a good idea to use the imperative present tense in these messages. In other words, use commands. Instead of “I added tests for” or “Adding tests for,” use “Add tests for.” Here is a template originally written by Tim Pope:
 
Short (50 chars or less) summary of changes
 
More detailed explanatory text, if necessary. Wrap it to about 72 characters or so. In some contexts, the first line is treated as the subject of an email and the rest of the text as the body. The blank line separating the summary from the body is critical (unless you omit the body entirely); tools like rebase can get confused if you run the two together.
 
Further paragraphs come after blank lines.
 
  - Bullet points are okay, too
 
  - Typically a hyphen or asterisk is used for the bullet,    preceded by a single space, with blank lines in    between, but conventions vary here
 
If all your commit messages look like this, things will be a lot easier for you and the developers you work with. The Git project has well-formatted commit messages—try running git log --no-merges there to see what a nicely formatted project-commit history looks like. In the following examples, and throughout most of this book, for the sake of brevity this book doesn’t have nicely formatted messages like this; instead, we use the -m option to git commit. Do as we say, not 